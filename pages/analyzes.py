import streamlit as st
import pandas as pd
import numpy as np
from scipy import stats
import plotly.express as px
from components.navigation import navigation_bar

navigation_bar()

st.title("An√°lise de Dados de Processos do Sistema")

# --- 1. Apresenta√ß√£o dos Dados e Tipos de Vari√°veis (Requisito 1) ---
st.markdown("""
### 1. Sobre o Conjunto de Dados
Esta an√°lise √© baseada em um arquivo de texto (`processos.txt`) que simula a sa√≠da de um comando de monitoramento de processos em um sistema operacional (como o `top` ou `ps`). O objetivo √© entender o comportamento do consumo de recursos (CPU e mem√≥ria) pelos diferentes processos e usu√°rios.
""")

st.info("""
**Como gerar o arquivo de an√°lise:**
Para extrair os dados de processos do seu sistema, execute o comando correspondente ao seu sistema operacional no terminal. 
""")

lin_tab, win_tab = st.tabs(["üêß Linux / macOS", "ü™ü Windows"])

with lin_tab:
    st.markdown("""
    Execute o comando abaixo no seu terminal. Ele ir√° gerar o arquivo `processos.txt` no formato esperado para a **An√°lise Guiada**.
    
    ```bash
    ps -eo pid,user,%cpu,%mem,command --sort=-%cpu > processos.txt
    ```
    Depois, coloque o arquivo gerado na pasta `data/` do projeto ou fa√ßa o upload na aba "An√°lise Customizada".
    """)

with win_tab:
    st.markdown("""
    Execute o comando abaixo no **PowerShell**. Ele ir√° gerar um arquivo `processos.csv`.

    ```powershell
    Get-Process -IncludeUserName | Select-Object Id, UserName, CPU, WS, ProcessName | ConvertTo-Csv -NoTypeInformation > processos.csv
    ```
    
    **Importante:** Use o arquivo `processos.csv` gerado diretamente na aba "An√°lise Customizada", pois o formato √© diferente do esperado pela an√°lise guiada.
    """)

with st.expander("Detalhes do Conjunto de Dados"):
    st.markdown("""
    **Perguntas de An√°lise:**
    - Qual √© a distribui√ß√£o do consumo de CPU e mem√≥ria?
    - Existem processos ou usu√°rios que consomem mais recursos?
    - A m√©dia de consumo de CPU do sistema se mant√©m em um n√≠vel esperado?

    **Tipos de Vari√°veis:**
    - **PID**: `Quantitativa Discreta` (Identificador do Processo)
    - **USER**: `Qualitativa Nominal` (Nome do Usu√°rio)
    - **%CPU**: `Quantitativa Cont√≠nua` (Percentual de uso da CPU)
    - **%MEM**: `Quantitativa Cont√≠nua` (Percentual de uso da Mem√≥ria)
    - **COMMAND**: `Qualitativa Nominal` (Nome do Comando/Processo)
    """)

tab_dashboard, tab_report, tab_conversor = st.tabs(['üìà An√°lise Guiada', 'üìã An√°lise Customizada', 'üîÑ Conversor TXT -> CSV'])

# =========================
# Fun√ß√£o para converter TXT -> DataFrame
# =========================
def converter_txt_para_df(linhas):
    dados = []
    for linha in linhas:
        partes = linha.split()
        if len(partes) < 5:
            continue
        try:
            pid = int(partes[0])
            user = partes[1]
            cpu = float(partes[2])
            mem = float(partes[3])
            command = " ".join(partes[4:])
            dados.append([pid, user, cpu, mem, command])
        except:
            pass
    return pd.DataFrame(dados, columns=["PID", "USER", "%CPU", "%MEM", "COMMAND"])

# =========================
# Fun√ß√£o de an√°lise
# =========================
def analise_processos(df):
    st.subheader("Pr√©-visualiza√ß√£o dos Dados")
    st.dataframe(df.head())

    # --- 2. Medidas Centrais, Dispers√£o, Correla√ß√£o (Requisito 2) ---
    st.markdown("### 2. An√°lise Descritiva e Correla√ß√£o")
    st.write("A tabela abaixo resume as principais estat√≠sticas das vari√°veis de consumo.")
    st.write(df[["%CPU", "%MEM"]].describe())

    media_cpu = df["%CPU"].mean()
    mediana_cpu = df["%CPU"].median()
    dp_cpu = df["%CPU"].std()

    col1, col2, col3 = st.columns(3)
    col1.metric("M√©dia CPU (%)", f"{media_cpu:.2f}")
    col2.metric("Mediana CPU (%)", f"{mediana_cpu:.2f}")
    col3.metric("Desvio Padr√£o CPU (%)", f"{dp_cpu:.2f}")

    st.markdown("#### Distribui√ß√£o e Correla√ß√£o")
    st.write("O histograma mostra que a maioria dos processos consome pouca CPU, com alguns outliers consumindo mais. O gr√°fico de dispers√£o investiga se h√° uma correla√ß√£o entre o consumo de CPU e mem√≥ria.")

    col_hist, col_scatter = st.columns(2)
    with col_hist:
        fig_hist = px.histogram(df, x="%CPU", nbins=20, title="Distribui√ß√£o do Uso de CPU (%)")
        st.plotly_chart(fig_hist, use_container_width=True)
    with col_scatter:
        fig_scatter = px.scatter(df, x="%CPU", y="%MEM", title="Correla√ß√£o CPU vs. Mem√≥ria")
        st.plotly_chart(fig_scatter, use_container_width=True)

    correlacao = df["%CPU"].corr(df["%MEM"])
    st.info(f"**Correla√ß√£o entre CPU e Mem√≥ria:** `{correlacao:.2f}`. Um valor pr√≥ximo de 0 indica uma correla√ß√£o linear fraca.")

    st.markdown("#### Consumo por Usu√°rio")
    consumo_usuario = df.groupby("USER")[["%CPU", "%MEM"]].sum().sort_values(by="%CPU", ascending=False).reset_index()
    fig_bar = px.bar(consumo_usuario, x="USER", y="%CPU", title="Consumo Total de CPU por Usu√°rio (%)")
    st.plotly_chart(fig_bar, use_container_width=True)


    # --- 3. Intervalo de Confian√ßa e Teste de Hip√≥tese (Requisito 3) ---
    st.markdown("### 3. Infer√™ncia Estat√≠stica sobre o Uso de CPU")
    st.write("Nesta se√ß√£o, usamos a amostra de dados para fazer infer√™ncias sobre a popula√ß√£o de todos os processos.")

    st.markdown("#### Teste de Hip√≥tese para a M√©dia de CPU")
    st.markdown("""
    **Justificativa:** Para verificar se o consumo m√©dio de CPU do sistema est√° acima de um patamar hipot√©tico de **2%**, usamos um **Teste T de uma amostra**. Este teste √© adequado porque temos uma amostra dos dados e queremos comparar sua m√©dia com um valor espec√≠fico.

    - **Hip√≥tese Nula (H‚ÇÄ):** A m√©dia de uso de CPU √© igual a 2% (`Œº = 2`).
    - **Hip√≥tese Alternativa (H‚ÇÅ):** A m√©dia de uso de CPU √© diferente de 2% (`Œº ‚â† 2`).
    """)

    media_hipotetica = 2.0
    t_stat, p_val = stats.ttest_1samp(df["%CPU"], media_hipotetica)

    st.write(f"**Resultado do Teste T:** (H‚ÇÄ: M√©dia de CPU = {media_hipotetica}%)")
    col_t, col_p = st.columns(2)
    col_t.metric("Estat√≠stica t", f"{t_stat:.2f}")
    col_p.metric("Valor-p", f"{p_val:.4f}")

    if p_val < 0.05:
        st.success(f"**Conclus√£o:** Rejeitamos a hip√≥tese nula (p < 0.05). A m√©dia de consumo de CPU √© estatisticamente diferente de {media_hipotetica}%.")
    else:
        st.info(f"**Conclus√£o:** N√£o h√° evid√™ncias para rejeitar a hip√≥tese nula (p >= 0.05). A m√©dia de consumo de CPU n√£o √© estatisticamente diferente de {media_hipotetica}%.")

    st.markdown("#### Intervalo de Confian√ßa")
    st.write("O Intervalo de Confian√ßa (IC) de 95% nos d√° uma faixa de valores onde podemos ter 95% de certeza de que a verdadeira m√©dia de consumo de CPU da popula√ß√£o se encontra.")
    ic = stats.t.interval(0.95, len(df["%CPU"])-1, loc=media_cpu, scale=stats.sem(df["%CPU"]))
    st.success(f"**IC de 95% para a M√©dia de CPU:** `{ic[0]:.2f}%` a `{ic[1]:.2f}%`")

    st.markdown("### 4. Conclus√µes e Insights")
    st.info("""
    Com base nos dados, notamos que a m√©dia de consumo de CPU √© estatisticamente diferente de 2%, o que pode indicar que o sistema opera com uma carga um pouco acima do esperado. 
    
    Al√©m disso, a baixa correla√ß√£o entre CPU e mem√≥ria sugere que n√£o h√° uma rela√ß√£o direta de consumo entre esses dois recursos, ou seja, um processo que usa muita CPU n√£o necessariamente usar√° muita mem√≥ria.
    """)


# =========================
# Aba An√°lise Guiada
# =========================
with tab_dashboard:
    try:
        with open("data/processos.txt", "r") as f:
            linhas = f.readlines()
        df = converter_txt_para_df(linhas)
        analise_processos(df)
    except FileNotFoundError:
        st.error("Arquivo `data/processos.txt` n√£o encontrado. Verifique o caminho e a estrutura do projeto.")
    except Exception as e:
        st.error(f"Ocorreu um erro ao processar o arquivo: {e}")


# =========================
# Aba An√°lise Customizada
# =========================
with tab_report:
    uploaded_file = st.file_uploader("Envie seu arquivo .txt ou .csv", type=["txt", "csv"], key="custom_uploader")
    if uploaded_file is not None:
        try:
            if uploaded_file.name.endswith(".txt"):
                linhas = uploaded_file.read().decode("utf-8").splitlines()
                df = converter_txt_para_df(linhas)
            else:
                df = pd.read_csv(uploaded_file)
            analise_processos(df)
        except Exception as e:
            st.error(f"Ocorreu um erro ao processar o arquivo: {e}")

# =========================
# Aba Conversor
# =========================
with tab_conversor:
    st.header("Conversor de TXT (processos) para CSV")
    uploaded_file_conv = st.file_uploader("Envie o arquivo de processos (.txt)", type=["txt"], key="converter_uploader")
    if uploaded_file_conv is not None:
        try:
            linhas = uploaded_file_conv.read().decode("utf-8").splitlines()
            df_conv = converter_txt_para_df(linhas)

            st.subheader("Pr√©-visualiza√ß√£o dos Dados")
            st.dataframe(df_conv.head())

            csv = df_conv.to_csv(index=False).encode("utf-8")
            st.download_button(
                label="üì• Baixar CSV formatado",
                data=csv,
                file_name="processos.csv",
                mime="text/csv"
            )
        except Exception as e:
            st.error(f"Ocorreu um erro ao processar o arquivo: {e}")